
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COLON COMMA ENDMODULE FALSE ID INPUT LPAREN MODULE NAND NOR NOT OR OUTPUT RPAREN SCOLON TRUE WIRE XOR program : MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE idlist : ID\n              | ID COMMA idlist output : OUTPUT idlist SCOLON input : INPUT idlist SCOLON wires : empty\n             | WIRE idlist SCOLON arg : ID\n             | TRUE\n             | FALSE exprlist : expr\n                | exprlist expr expr : gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON\n            | NOT LPAREN ID COMMA arg RPAREN SCOLON gate2 : AND\n             | OR\n             | NAND\n             | XOR\n             | NOR empty :'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,32,],[0,-1,]),'ID':([2,4,7,12,14,18,34,35,39,40,46,],[3,5,5,5,5,5,37,38,41,41,41,]),'LPAREN':([3,23,24,25,26,27,28,29,],[4,34,35,-15,-16,-17,-18,-19,]),'RPAREN':([5,6,9,41,43,44,45,48,],[-2,8,-3,-8,-9,-10,47,50,]),'SCOLON':([5,9,15,19,30,47,50,],[-2,-3,20,31,36,49,51,]),'COMMA':([5,37,38,41,42,43,44,],[7,39,40,-8,46,-9,-10,]),'COLON':([8,],[10,]),'OUTPUT':([10,],[12,]),'INPUT':([11,20,],[14,-4,]),'WIRE':([13,31,],[18,-5,]),'NOT':([13,16,17,21,22,31,33,36,49,51,],[-20,24,-6,24,-11,-5,-12,-7,-14,-13,]),'AND':([13,16,17,21,22,31,33,36,49,51,],[-20,25,-6,25,-11,-5,-12,-7,-14,-13,]),'OR':([13,16,17,21,22,31,33,36,49,51,],[-20,26,-6,26,-11,-5,-12,-7,-14,-13,]),'NAND':([13,16,17,21,22,31,33,36,49,51,],[-20,27,-6,27,-11,-5,-12,-7,-14,-13,]),'XOR':([13,16,17,21,22,31,33,36,49,51,],[-20,28,-6,28,-11,-5,-12,-7,-14,-13,]),'NOR':([13,16,17,21,22,31,33,36,49,51,],[-20,29,-6,29,-11,-5,-12,-7,-14,-13,]),'ENDMODULE':([21,22,33,49,51,],[32,-11,-12,-14,-13,]),'TRUE':([39,40,46,],[43,43,43,]),'FALSE':([39,40,46,],[44,44,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'idlist':([4,7,12,14,18,],[6,9,15,19,30,]),'output':([10,],[11,]),'input':([11,],[13,]),'wires':([13,],[16,]),'empty':([13,],[17,]),'exprlist':([16,],[21,]),'expr':([16,21,],[22,33,]),'gate2':([16,21,],[23,23,]),'arg':([39,40,46,],[42,45,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE','program',11,'p_bdgate','verilog.py',96),
  ('idlist -> ID','idlist',1,'p_idlist','verilog.py',100),
  ('idlist -> ID COMMA idlist','idlist',3,'p_idlist','verilog.py',101),
  ('output -> OUTPUT idlist SCOLON','output',3,'p_output','verilog.py',108),
  ('input -> INPUT idlist SCOLON','input',3,'p_input','verilog.py',112),
  ('wires -> empty','wires',1,'p_wires','verilog.py',116),
  ('wires -> WIRE idlist SCOLON','wires',3,'p_wires','verilog.py',117),
  ('arg -> ID','arg',1,'p_arg','verilog.py',121),
  ('arg -> TRUE','arg',1,'p_arg','verilog.py',122),
  ('arg -> FALSE','arg',1,'p_arg','verilog.py',123),
  ('exprlist -> expr','exprlist',1,'p_exprlist','verilog.py',127),
  ('exprlist -> exprlist expr','exprlist',2,'p_exprlist','verilog.py',128),
  ('expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON','expr',9,'p_expr','verilog.py',135),
  ('expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON','expr',7,'p_expr','verilog.py',136),
  ('gate2 -> AND','gate2',1,'p_gate2','verilog.py',145),
  ('gate2 -> OR','gate2',1,'p_gate2','verilog.py',146),
  ('gate2 -> NAND','gate2',1,'p_gate2','verilog.py',147),
  ('gate2 -> XOR','gate2',1,'p_gate2','verilog.py',148),
  ('gate2 -> NOR','gate2',1,'p_gate2','verilog.py',149),
  ('empty -> <empty>','empty',0,'p_empty','verilog.py',153),
]
