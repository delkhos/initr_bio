Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE
Rule 2     idlist -> ID
Rule 3     idlist -> ID COMMA idlist
Rule 4     output -> OUTPUT idlist SCOLON
Rule 5     input -> INPUT idlist SCOLON
Rule 6     wires -> empty
Rule 7     wires -> WIRE idlist SCOLON
Rule 8     arg -> ID
Rule 9     arg -> TRUE
Rule 10    arg -> FALSE
Rule 11    exprlist -> expr
Rule 12    exprlist -> exprlist expr
Rule 13    expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON
Rule 14    expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON
Rule 15    gate2 -> AND
Rule 16    gate2 -> OR
Rule 17    gate2 -> NAND
Rule 18    gate2 -> XOR
Rule 19    gate2 -> NOR
Rule 20    empty -> <empty>

Terminals, with rules where they appear

AND                  : 15
COLON                : 1
COMMA                : 3 13 13 14
ENDMODULE            : 1
FALSE                : 10
ID                   : 1 2 3 8 13 14
INPUT                : 5
LPAREN               : 1 13 14
MODULE               : 1
NAND                 : 17
NOR                  : 19
NOT                  : 14
OR                   : 16
OUTPUT               : 4
RPAREN               : 1 13 14
SCOLON               : 4 5 7 13 14
TRUE                 : 9
WIRE                 : 7
XOR                  : 18
error                : 

Nonterminals, with rules where they appear

arg                  : 13 13 14
empty                : 6
expr                 : 11 12
exprlist             : 1 12
gate2                : 13
idlist               : 1 3 4 5 7
input                : 1
output               : 1
program              : 0
wires                : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE

    MODULE          shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> MODULE . ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE

    ID              shift and go to state 3


state 3

    (1) program -> MODULE ID . LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE

    LPAREN          shift and go to state 4


state 4

    (1) program -> MODULE ID LPAREN . idlist RPAREN COLON output input wires exprlist ENDMODULE
    (2) idlist -> . ID
    (3) idlist -> . ID COMMA idlist

    ID              shift and go to state 5

    idlist                         shift and go to state 6

state 5

    (2) idlist -> ID .
    (3) idlist -> ID . COMMA idlist

    RPAREN          reduce using rule 2 (idlist -> ID .)
    SCOLON          reduce using rule 2 (idlist -> ID .)
    COMMA           shift and go to state 7


state 6

    (1) program -> MODULE ID LPAREN idlist . RPAREN COLON output input wires exprlist ENDMODULE

    RPAREN          shift and go to state 8


state 7

    (3) idlist -> ID COMMA . idlist
    (2) idlist -> . ID
    (3) idlist -> . ID COMMA idlist

    ID              shift and go to state 5

    idlist                         shift and go to state 9

state 8

    (1) program -> MODULE ID LPAREN idlist RPAREN . COLON output input wires exprlist ENDMODULE

    COLON           shift and go to state 10


state 9

    (3) idlist -> ID COMMA idlist .

    RPAREN          reduce using rule 3 (idlist -> ID COMMA idlist .)
    SCOLON          reduce using rule 3 (idlist -> ID COMMA idlist .)


state 10

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON . output input wires exprlist ENDMODULE
    (4) output -> . OUTPUT idlist SCOLON

    OUTPUT          shift and go to state 12

    output                         shift and go to state 11

state 11

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON output . input wires exprlist ENDMODULE
    (5) input -> . INPUT idlist SCOLON

    INPUT           shift and go to state 14

    input                          shift and go to state 13

state 12

    (4) output -> OUTPUT . idlist SCOLON
    (2) idlist -> . ID
    (3) idlist -> . ID COMMA idlist

    ID              shift and go to state 5

    idlist                         shift and go to state 15

state 13

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON output input . wires exprlist ENDMODULE
    (6) wires -> . empty
    (7) wires -> . WIRE idlist SCOLON
    (20) empty -> .

    WIRE            shift and go to state 18
    NOT             reduce using rule 20 (empty -> .)
    AND             reduce using rule 20 (empty -> .)
    OR              reduce using rule 20 (empty -> .)
    NAND            reduce using rule 20 (empty -> .)
    XOR             reduce using rule 20 (empty -> .)
    NOR             reduce using rule 20 (empty -> .)

    wires                          shift and go to state 16
    empty                          shift and go to state 17

state 14

    (5) input -> INPUT . idlist SCOLON
    (2) idlist -> . ID
    (3) idlist -> . ID COMMA idlist

    ID              shift and go to state 5

    idlist                         shift and go to state 19

state 15

    (4) output -> OUTPUT idlist . SCOLON

    SCOLON          shift and go to state 20


state 16

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON output input wires . exprlist ENDMODULE
    (11) exprlist -> . expr
    (12) exprlist -> . exprlist expr
    (13) expr -> . gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON
    (14) expr -> . NOT LPAREN ID COMMA arg RPAREN SCOLON
    (15) gate2 -> . AND
    (16) gate2 -> . OR
    (17) gate2 -> . NAND
    (18) gate2 -> . XOR
    (19) gate2 -> . NOR

    NOT             shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    NAND            shift and go to state 27
    XOR             shift and go to state 28
    NOR             shift and go to state 29

    exprlist                       shift and go to state 21
    expr                           shift and go to state 22
    gate2                          shift and go to state 23

state 17

    (6) wires -> empty .

    NOT             reduce using rule 6 (wires -> empty .)
    AND             reduce using rule 6 (wires -> empty .)
    OR              reduce using rule 6 (wires -> empty .)
    NAND            reduce using rule 6 (wires -> empty .)
    XOR             reduce using rule 6 (wires -> empty .)
    NOR             reduce using rule 6 (wires -> empty .)


state 18

    (7) wires -> WIRE . idlist SCOLON
    (2) idlist -> . ID
    (3) idlist -> . ID COMMA idlist

    ID              shift and go to state 5

    idlist                         shift and go to state 30

state 19

    (5) input -> INPUT idlist . SCOLON

    SCOLON          shift and go to state 31


state 20

    (4) output -> OUTPUT idlist SCOLON .

    INPUT           reduce using rule 4 (output -> OUTPUT idlist SCOLON .)


state 21

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist . ENDMODULE
    (12) exprlist -> exprlist . expr
    (13) expr -> . gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON
    (14) expr -> . NOT LPAREN ID COMMA arg RPAREN SCOLON
    (15) gate2 -> . AND
    (16) gate2 -> . OR
    (17) gate2 -> . NAND
    (18) gate2 -> . XOR
    (19) gate2 -> . NOR

    ENDMODULE       shift and go to state 32
    NOT             shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    NAND            shift and go to state 27
    XOR             shift and go to state 28
    NOR             shift and go to state 29

    expr                           shift and go to state 33
    gate2                          shift and go to state 23

state 22

    (11) exprlist -> expr .

    ENDMODULE       reduce using rule 11 (exprlist -> expr .)
    NOT             reduce using rule 11 (exprlist -> expr .)
    AND             reduce using rule 11 (exprlist -> expr .)
    OR              reduce using rule 11 (exprlist -> expr .)
    NAND            reduce using rule 11 (exprlist -> expr .)
    XOR             reduce using rule 11 (exprlist -> expr .)
    NOR             reduce using rule 11 (exprlist -> expr .)


state 23

    (13) expr -> gate2 . LPAREN ID COMMA arg COMMA arg RPAREN SCOLON

    LPAREN          shift and go to state 34


state 24

    (14) expr -> NOT . LPAREN ID COMMA arg RPAREN SCOLON

    LPAREN          shift and go to state 35


state 25

    (15) gate2 -> AND .

    LPAREN          reduce using rule 15 (gate2 -> AND .)


state 26

    (16) gate2 -> OR .

    LPAREN          reduce using rule 16 (gate2 -> OR .)


state 27

    (17) gate2 -> NAND .

    LPAREN          reduce using rule 17 (gate2 -> NAND .)


state 28

    (18) gate2 -> XOR .

    LPAREN          reduce using rule 18 (gate2 -> XOR .)


state 29

    (19) gate2 -> NOR .

    LPAREN          reduce using rule 19 (gate2 -> NOR .)


state 30

    (7) wires -> WIRE idlist . SCOLON

    SCOLON          shift and go to state 36


state 31

    (5) input -> INPUT idlist SCOLON .

    WIRE            reduce using rule 5 (input -> INPUT idlist SCOLON .)
    NOT             reduce using rule 5 (input -> INPUT idlist SCOLON .)
    AND             reduce using rule 5 (input -> INPUT idlist SCOLON .)
    OR              reduce using rule 5 (input -> INPUT idlist SCOLON .)
    NAND            reduce using rule 5 (input -> INPUT idlist SCOLON .)
    XOR             reduce using rule 5 (input -> INPUT idlist SCOLON .)
    NOR             reduce using rule 5 (input -> INPUT idlist SCOLON .)


state 32

    (1) program -> MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE .

    $end            reduce using rule 1 (program -> MODULE ID LPAREN idlist RPAREN COLON output input wires exprlist ENDMODULE .)


state 33

    (12) exprlist -> exprlist expr .

    ENDMODULE       reduce using rule 12 (exprlist -> exprlist expr .)
    NOT             reduce using rule 12 (exprlist -> exprlist expr .)
    AND             reduce using rule 12 (exprlist -> exprlist expr .)
    OR              reduce using rule 12 (exprlist -> exprlist expr .)
    NAND            reduce using rule 12 (exprlist -> exprlist expr .)
    XOR             reduce using rule 12 (exprlist -> exprlist expr .)
    NOR             reduce using rule 12 (exprlist -> exprlist expr .)


state 34

    (13) expr -> gate2 LPAREN . ID COMMA arg COMMA arg RPAREN SCOLON

    ID              shift and go to state 37


state 35

    (14) expr -> NOT LPAREN . ID COMMA arg RPAREN SCOLON

    ID              shift and go to state 38


state 36

    (7) wires -> WIRE idlist SCOLON .

    NOT             reduce using rule 7 (wires -> WIRE idlist SCOLON .)
    AND             reduce using rule 7 (wires -> WIRE idlist SCOLON .)
    OR              reduce using rule 7 (wires -> WIRE idlist SCOLON .)
    NAND            reduce using rule 7 (wires -> WIRE idlist SCOLON .)
    XOR             reduce using rule 7 (wires -> WIRE idlist SCOLON .)
    NOR             reduce using rule 7 (wires -> WIRE idlist SCOLON .)


state 37

    (13) expr -> gate2 LPAREN ID . COMMA arg COMMA arg RPAREN SCOLON

    COMMA           shift and go to state 39


state 38

    (14) expr -> NOT LPAREN ID . COMMA arg RPAREN SCOLON

    COMMA           shift and go to state 40


state 39

    (13) expr -> gate2 LPAREN ID COMMA . arg COMMA arg RPAREN SCOLON
    (8) arg -> . ID
    (9) arg -> . TRUE
    (10) arg -> . FALSE

    ID              shift and go to state 41
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44

    arg                            shift and go to state 42

state 40

    (14) expr -> NOT LPAREN ID COMMA . arg RPAREN SCOLON
    (8) arg -> . ID
    (9) arg -> . TRUE
    (10) arg -> . FALSE

    ID              shift and go to state 41
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44

    arg                            shift and go to state 45

state 41

    (8) arg -> ID .

    COMMA           reduce using rule 8 (arg -> ID .)
    RPAREN          reduce using rule 8 (arg -> ID .)


state 42

    (13) expr -> gate2 LPAREN ID COMMA arg . COMMA arg RPAREN SCOLON

    COMMA           shift and go to state 46


state 43

    (9) arg -> TRUE .

    COMMA           reduce using rule 9 (arg -> TRUE .)
    RPAREN          reduce using rule 9 (arg -> TRUE .)


state 44

    (10) arg -> FALSE .

    COMMA           reduce using rule 10 (arg -> FALSE .)
    RPAREN          reduce using rule 10 (arg -> FALSE .)


state 45

    (14) expr -> NOT LPAREN ID COMMA arg . RPAREN SCOLON

    RPAREN          shift and go to state 47


state 46

    (13) expr -> gate2 LPAREN ID COMMA arg COMMA . arg RPAREN SCOLON
    (8) arg -> . ID
    (9) arg -> . TRUE
    (10) arg -> . FALSE

    ID              shift and go to state 41
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44

    arg                            shift and go to state 48

state 47

    (14) expr -> NOT LPAREN ID COMMA arg RPAREN . SCOLON

    SCOLON          shift and go to state 49


state 48

    (13) expr -> gate2 LPAREN ID COMMA arg COMMA arg . RPAREN SCOLON

    RPAREN          shift and go to state 50


state 49

    (14) expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .

    ENDMODULE       reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    NOT             reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    AND             reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    OR              reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    NAND            reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    XOR             reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)
    NOR             reduce using rule 14 (expr -> NOT LPAREN ID COMMA arg RPAREN SCOLON .)


state 50

    (13) expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN . SCOLON

    SCOLON          shift and go to state 51


state 51

    (13) expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .

    ENDMODULE       reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    NOT             reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    AND             reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    OR              reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    NAND            reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    XOR             reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)
    NOR             reduce using rule 13 (expr -> gate2 LPAREN ID COMMA arg COMMA arg RPAREN SCOLON .)

